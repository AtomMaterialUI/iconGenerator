###

PRIMARY CONFIGURATION FILE
==========================

icon:      An icon defined in `icons.less`.

colour:    Optional icon colour. Must match one of the colour names defined in `colours.less`.

match:     Pattern(s) to match against the filename. This may be a string, an array, or a regular expression.

           String:
               If passed a string, it's used to match the file's extension case-insensitively.
               Therefore, passing ".json" is functionally equivalent to /\.json$/i, but spares
               an author the tedium of writing out the latter. Regex characters are escaped so
               names like ".c++" don't require backslashes (no need for ".c\+\+")

           Array:
               If passed an array, it's used to provide multiple colour variants for different
               filenames/extensions. Each value is expected to be an array containing:

                   0. Path-matching pattern (required)
                   1. Colour name
                   2. Additional properties, expressed as either an object literal or a string.
                      Strings are treated as shorthand for setting alias, scope and interpreter
                      properties to the same value.

               Most contributors will only need to touch the first two elements.

priority:  More than one pattern may match a filename. To ensure more specific patterns aren't overridden
           by more general patterns, set the priority index to a value greater than 1. This property is
           optional and defaults to 1 if omitted.



ADVANCED PROPERTIES
-------------------
These are chiefly of interest only to the package's maintainers.

alias:        There may be more than one way to write a language's name. For example, C++ may be referred to as
              "cpp", C# as "csharp" or "c sharp", and so on. This property exists so modelines and .gitattributes
              will match any of a language's acceptable names. It may be expressed as either a single string (case
              insensitive), or a regular expression.

generic:      Instructs the service not to use the rule's name as a language alias.

scope:        Name of any TextMate grammars which trigger the icon when overriding a file's grammar. This may be
              a string or regex; if provided the former, it's used to construct a case-insensitive pattern that's
              checked against the end of the string (e.g., "js" will be treated as if /\.js$/i were written). Not
              every grammar will/should change an icon, especially for very generic formats like JSON or YAML.

interpreter:  Program name(s) to look for in hashbang lines. This may be a string or a regular expression, both
              of which are matched against the program's name, instead of the entire hashbang line. E.g., /python/
              will be tested against "python2", not "#!/usr/local/bin/python2". Matching is case-sensitive, and
              strings are not converted into regular expressions the way other options are. Ergo, /python/ will
              match "python2" but "python" would not.

signature:    RegExp (not string) to match file signatures (aka, "magic numbers"). This is done as a last resort
              when no paths are matched. Note the binary icon is always shown for files that contain null bytes.

matchPath:    By default, matching is done using a file or directory's basename. Setting matchPath instructs the
              service to match against an entity's full system-path instead. If the rule's match-pattern was supplied
              as a string, its path separators are expanded to match both Windows and POSIX-style delimiters. That is,
              "node_modules/.bin" becomes the same as writing /node_modules[\/\\]\.bin$/i.

noSuffix:     By default, icon names are suffixed with "-icon". Set noSuffix to true if you need to specify an
              icon class in its entirety (such as a default Atom icon). This should otherwise rarely be used.



RESERVED FOR FUTURE USE
-----------------------

mime:  A MIME Content-Type string of the form detailed in RFC 2231 ยง5.

uses:  A loosely-defined "parent" from which to inherit properties not defined by the entry. Intended to
       address the longstanding problem of config/case-specific icons being replaced by a less qualified
       icon. For example, the file "app-test.js" should display the `test-js` icon even when it contains
       a modeline or interpreter directive. Currently, this isn't the case.
###



fileIcons:

	Generic:
		icon: "code"
		generic: true
		match: [
			[".rdf", "dark-red"]
			[/^configure\.ac$/, "medium-red"]
			[/^Settings\.StyleCop$/, "medium-green"]
			[".4th", "medium-blue"]
			[/\.adm[lx]$/i, "dark-blue"]
			[".aepx", "medium-purple"]
			[".appxmanifest", "medium-orange"]
			[".ash", "medium-cyan"]
			[/\.asn1?$/i, "medium-cyan"]
			[".axml", "dark-blue"]
			[".befunge", "medium-orange"]
			[".bmx", "dark-blue"]
			[".brs", "dark-blue", "brightscript"]
			[".capnp", "dark-red", scope: "capnp", alias: /^(Cap[^\w\s]?n\s*Proto|capnp)$/i]
			[".ccxml", "dark-blue"]
			[".cscfg", "medium-red"]
			[".cgi", "medium-red"]
			[".ch", "medium-red"]
			[".clixml", "dark-blue"]
			[".cocci", "medium-blue", scope: "smpl", alias: /^(SmPL|Coccinelle)$/i]
			[".ct", "dark-pink"]
			[".cw", "medium-red"]
			[".cy", "dark-green"]
			[".rdg", "dark-purple"]
			[".dita", "medium-purple"]
			[".ditamap", "dark-purple"]
			[".ditaval", "medium-green"]
			[".dotsettings", "dark-red"]
			[".dyl", "medium-blue"]
			[".dylan", "medium-blue"]
			[".eclxml", "dark-green"]
			[".fcgi", "medium-blue"]
			[".fidl", "medium-pink", "fidl"]
			[".filters", "medium-pink"]
			[".fo", "medium-red", "fasto"]
			[".forth", "medium-blue"]
			[".frt", "dark-purple"]
			[".fsproj", "dark-red"]
			[".fth", "dark-blue"]
			[".fun", "medium-orange"]
			[".fxml", "medium-maroon"]
			[".grace", "medium-purple"]
			[".grxml", "dark-orange"]
			[".intr", "dark-blue"]
			[".ivy", "dark-green"]
			[".jelly", "medium-yellow"]
			[/\.jf?lex$/i, "medium-red", scope: /^source\.jf?lex$/i]
			[".joy", "medium-yellow", "joy"]
			[".jsproj", "dark-yellow"]
			[".jspx", "dark-purple"]
			[".launch", "medium-blue"]
			[".lid", "medium-purple"]
			[".lp", "dark-purple"]
			[".m4", "medium-red", "m4"]
			[".mask", "medium-red"]
			[".mdpolicy", "dark-blue"]
			[".menu", "medium-blue"]
			[/\.mq[45h]$/i, "dark-blue", scope: /(^|\.)mq[45](?=\.|$)/i]
			[".mtml", "dark-blue"]
			[".muf", "medium-orange"]
			[".mumps", "medium-red"]
			[".myt", "dark-blue"]
			[".natvis", "dark-green"]
			[".odd", "light-green"]
			[".ohm", "dark-yellow", "ohm"]
			[".omgrofl", "dark-purple"]
			[".osm", "dark-purple"]
			[".pig", "medium-pink"]
			[".prg", "medium-red"]
			[".props", "medium-cyan"]
			[".psc1", "light-blue"]
			[".qhelp", "medium-purple", alias: "Semmle", uses: "XML"]
			[".resx", "medium-cyan"]
			[".rl", "medium-red"]
			[".scxml", "light-cyan"]
			[".sed", "dark-green", scope: "sed", interpreter: /^([gs]?sed|minised)$/]
			[/\.sgml?$/i, "dark-yellow"]
			[".sig", "light-maroon"]
			[".sk", "light-blue", signature: /^##Sketch 1 2/]
			[/\.sk[12]$/i, "medium-blue", alias: "Skencil", signature: /^##sK1 /]
			[".sml", "medium-red"]
			[".smt", "light-blue", scope: "smt", interpreter: /boolector|cvc4|mathsat5|opensmt|smtinterpol|smt-rat|stp|verit|yices2|z3/]
			[".smt2", "medium-cyan"]
			[".spthy", "medium-green", alias: "Tamarin", scope: /(^|\.)(spthy|tamarin)(\.|$)/i, interpreter: /^tamarin([\s_-]?prover)?$/i]
			[".srdf", "medium-blue"]
			[".st", "medium-blue"]
			[".stellaris", "medium-blue", "stellaris"]
			[".tagx", "medium-purple"]
			[".targets", "medium-red"]
			[".tera", "medium-red"]
			[".tml", "dark-green"]
			[".ui", "medium-blue"]
			[".urdf", "dark-orange"]
			[".ux", "light-orange"]
			[".vxml", "light-purple"]
			[".webidl", "medium-red"]
			[".wisp", "dark-cyan"]
			[/\.wlp(4|ppp)$/i, "medium-blue", "wlp4"]
			[".wsf", "medium-blue"]
			[".x3d", "medium-blue"]
			[".xacro", "medium-red"]
			[".xlf", "dark-cyan"]
			[".xliff", "medium-red"]
			[".xmi", "medium-green"]
			[".xproj", "dark-red"]
			[".xsd", "dark-blue"]
			[".xul", "medium-orange"]
			[".zcml", "dark-pink"]
		]




	Nomad:
		icon: "nomad"
		match: ".nomad"
		colour: "medium-green"

	Noon:
		icon: "noon"
		match: ".noon"
		colour: "dark-grey"
		scope: "noon"
		interpreter: "noon"

	Normalize:
		icon: "normalize"
		priority: 2
		match: /^normalize(\.min)?\.(css|less|scss|styl)$/i
		colour: "medium-red"

	NPM:
		icon: "npm"
		priority: 2
		match: /^(package\.json|\.npmignore|\.?npmrc|npm-debug\.log|npm-shrinkwrap\.json|package-lock\.json)$/i
		colour: "medium-red"
		scope: /\.ini\.npmrc\b/

	NSIS:
		icon: "nsis"
		match: [
			[".nsi", "medium-purple", "nsis"]
			[".nsh", "dark-cyan"]
		]

	"NSRI Config":
		icon: "nsri"
		priority: 2
		match: [
			[/^\.nsrirc(\.(json|(config\.)?[cm]?js|ya?ml))?$/i, "medium-green"]
			[/^\.nsriignore(\.(json|(config\.)?[cm]?js|ya?ml))?$/i, "dark-green"]
		]

	"NSRI Integrity":
		icon: "nsri-alt"
		match: ".integrity.json"
		colour: "medium-green"
		priority: 2

	Nu:
		icon: "recycle"
		match: [
			[".nu", "light-green", scope: "nu", alias: "nush", interpreter: "nush"]
			[/^Nukefile$/, "dark-green"]
		]

	NuGet:
		icon: "nuget"
		match: [
			[".nuspec", "medium-blue"]
			[".pkgproj", "dark-purple"]
		]

	NumPy:
		icon: "numpy"
		match: [
			[".numpy", "dark-blue"]
			[".numpyw", "medium-blue"]
			[".numsc", "medium-orange"]
		]

	Nunjucks:
		icon: "nunjucks"
		match: /\.(nunjucks|njk)$/i
		colour: "dark-green"

	Nuxt:
		icon: "nuxt"
		priority: 2
		match: /^nuxt\.config\.[jt]s$/i
		colour: "medium-cyan"

	NXC: # Not eXactly C
		icon: "nxc"
		match: ".nxc"
		scope: "nxc"
		colour: "medium-orange"

	Oberon:
		icon: "oberon"
		match: ".ob2"
		colour: "medium-purple"
		scope: "oberon"
		uses: "Modula-2"

	"Objective-C":
		icon: "objc"
		match: [
			[/\.mm?$/i, "medium-blue", scope: /\.objc(pp)?$/i, alias: /^(Obj-?C|ObjectiveC)(\+\+)?$/i]
			[".pch", "dark-red"]
			[".x", "dark-green"]
		]

	"Objective-J":
		icon: "objj"
		match: [
			[".j", "dark-orange", scope: "objj", alias: /^(Obj-?J|ObjectiveJ)$/i]
			[".sj", "dark-red"]
		]

	OCaml:
		icon: "ocaml"
		match: [
			[".ml", "medium-orange", scope: "ocaml", interpreter: /ocaml(run|script)?/]
			[".mli", "dark-orange"]
			[".eliom", "medium-red"]
			[".eliomi", "dark-red"]
			[".ml4", "medium-green"]
			[".mll", "dark-green", "ocamllex"]
			[".mly", "dark-yellow", "menhir"]
		]

	Octave:
		icon: "octave"
		match: [
			[".octave", "medium-orange", scope: "octave"]
			[".octave_hist", "medium-orange"]
			[".octaverc", "dark-orange"]
		]

	Odin:
		icon: "odin"
		match: ".odin"
		colour: "medium-blue"
		scope: "odin"
		interpreter: "odin"

	OOC:
		icon: "ooc"
		scope: "ooc"
		match: ".ooc"
		colour: "medium-green"

	Opa:
		icon: "opa"
		scope: "opa"
		match: ".opa"
		colour: "medium-blue"

	OpenCL:
		icon: "opencl"
		scope: "opencl"
		match: ".opencl"
		colour: "medium-red"

	"OpenEdge ABL":
		icon: "progress"
		scope: "abl"
		alias: /^(progress|openedge|abl)$/i
		match: /\.(p|abl)$/i
		colour: "medium-green"

	"OpenGL Shading Language":
		icon: "opengl"
		alias: /^(GLSL|GLslang)$/i
		match: /\.(glslv?|gsh|gshader)$/i
		colour: "dark-cyan"
		scope: "glsl"

	"OpenGL Vertex Shader":
		icon: "vertex"
		match: [
			[/\.(vert|vrx|vertex|vsh(ader)?)$/i, "medium-blue", alias: /^Vertex[-_\s]*(Shader|Program)?$/i]
			[/\.(fra?g|fp|fsh|fshader)$/i, "medium-red", alias: /^Fragment[-_\s]*(Shader|Program)?$/i]
		]

	OpenOffice:
		icon: "openoffice"
		match: [
			[".odt", "medium-blue"]
			[".ott", "dark-blue"]
			[".fodt", "dark-purple"]
			[".ods", "medium-green"]
			[".ots", "dark-green"]
			[".fods", "dark-cyan"]
			[".odp", "medium-purple"]
			[".otp", "dark-pink"]
			[".fodp", "medium-pink"]
			[".odg", "medium-red"]
			[".otg", "dark-red"]
			[".fodg", "dark-orange"]
			[".odf", "medium-maroon"]
			[".odb", "light-pink"]
		]

	"Open Policy Agent":
		icon: "openpolicy"
		match: ".rego"
		colour: "medium-cyan"
		scope: "rego"

	OpenSCAD:
		icon: "scad"
		match: [
			[".scad", "medium-orange", scope: "scad"]
			[".jscad", "medium-yellow"]
		]

	OpenVMS:
		icon: "openvms"
		match: ".hlb"
		colour: "medium-blue"

	OpenVPN:
		icon: "openvpn"
		match: ".ovpn"
		colour: "medium-orange"

	"Org-mode":
		icon: "org"
		match: ".org"
		colour: "dark-green"

	"OS X":
		icon: "osx"
		match: ".dmg"
		colour: "medium-red"
		signature: /^\x78\x01\x73\x0D\x62\x62\x60/

	Ox:
		icon: "ox"
		match: [
			[".ox", "auto-cyan", scope: "ox"]
			[".oxh", "auto-green"]
			[".oxo", "auto-blue"]
		]

	Oxygene:
		icon: "oxygene"
		scope: "oxygene"
		match: ".oxygene"
		colour: "auto-cyan"

	Oz:
		icon: "oz"
		scope: "oz"
		match: ".oz"
		colour: "medium-yellow"

	SAC:
		icon: "sac"
		match: ".sac"
		colour: "medium-yellow"
		scope: "sac"

	Safari:
		icon: "safari"
		generic: true
		match: [
			[".webarchive", "medium-blue", alias: "WebArchive"]
		]

	Sage:
		icon: "sage"
		match: [
			[".sage", "medium-blue", "sage"]
			[".sagews", "dark-blue"]
		]

	Sails:
		icon: "sails"
		match: /^\.sailsrc$/i
		colour: "medium-blue"
		uses: ["JSON", "INI"]

	SaltStack:
		icon: "saltstack"
		scope: "salt"
		alias: /^Salt(State)?$/i
		match: ".sls"
		colour: "auto-blue"

	SAS:
		icon: "sas"
		scope: "sas"
		match: ".sas"
		colour: "medium-blue"

	Sass:
		icon: "sass"
		match: [
			[".scss", "light-pink", "scss"]
			[".sass", "dark-pink", "sass"]
			[/^\.sassrc(\.[cm]?js)?$/i, "auto-yellow", priority: 2, uses: "JavaScript"]
		]

	SBT:
		icon: "sbt"
		match: ".sbt"
		colour: "dark-purple"

	Scala:
		icon: "scala"
		match: [
			[/\.(sc|scala)$/i, "medium-red", "scala"]
			[".kojo", "medium-green"]
		]

	Scheme:
		icon: "scheme"
		match: [
			[".scm", "medium-red", scope: "scheme", interpreter: /guile|bigloo|chicken/]
			[".sld", "medium-blue"]
			[".sps", "medium-purple"]
		]

	Scilla:
		icon: "scilla"
		match: ".scilla"
		colour: "medium-orange"
		scope: "scilla"

	Scilab:
		icon: "scilab"
		match: [
			[".sci", "dark-purple", "scilab"]
			[".sce", "dark-blue"]
			[".tst", "dark-cyan"]
		]

	Scratch:
		icon: "scratch"
		uses: "ZIP"
		match: [
			[".sb2", "dark-orange"]
			[".sb3", "medium-orange"]
		]

	Scrutinizer:
		icon: "scrutinizer"
		priority: 2
		match: ".scrutinizer.yml"
		colour: "dark-blue"

	Secret:
		icon: "secret"
		match: ".secret"

	Self:
		icon: "self"
		scope: "self"
		match: ".self"
		colour: "dark-blue"

	"Semantic Release":
		icon: "semrelease"
		priority: 2
		match: /^\.releaserc(\.(ya?ml|[cm]?js|json))?$/i
		colour: "medium-grey"

	Sencha:
		icon: "sencha"
		priority: 2
		match: /^sencha(\.min)?\.[cm]?js$/i
		colour: "light-green"

	Sentry:
		icon: "sentry"
		match: ".sentryclirc"
		colour: ["medium-red", "light-red"]

	"Seperated-value files":
		icon: "graph"
		generic: true
		match: [
			[".csv", "light-red", scope: /(^|\.)csv(\.semicolon)?(\.|$)/i]
			[/\.(tab|tsv)$/i, "light-green"]
			[".dif", "medium-green"]
			[".slk", "medium-cyan"]
			[".prn", "dark-blue"]
		]

	Serverless:
		icon: "serverless"
		match: /(^|\.)serverless\.ya?ml$/i
		colour: "medium-red"
		priority: 2

	"Service Fabric":
		icon: "sf"
		match: ".sfproj"
		colour: "light-orange"

	Sequelize:
		icon: "sequelize"
		match: /\.sequelizerc(\.[cm]?js|\.json)?$/i
		colour: "auto-blue"
		priority: 2

	"Silicon Graphics Image":
		icon: "sgi"
		match: /\.(sgi|iris)$/i
		colour: "medium-orange"
		signature: /^\x01ร[\0-\x01]/

	"Shadow CLJS":
		icon: "shadowcljs"
		priority: 2
		match: /^shadow-cljs\.edn$/i
		colour: "auto-cyan"

	Shell:
		icon: "terminal"
		generic: true
		match: [
			[/\.(sh|rc|bats|bash|tool|install|command)$/i, "medium-purple"
				scope: "shell"
				alias: /^(sh|shell|Shell-?Script|Bash)$/i
				interpreter: /^([bd]ash|a?sh|zsh|rc)$/]
			[/^(\.?bash(rc|[-_]?(profile|login|logout|history|prompt))|_osc|config|install-sh|PKGBUILD)$/i, "dark-purple"]
			[/\.(ksh|mksh|pdksh)$/i, "dark-yellow"
				scope: "ksh-shell"
				interpreter: /^(ksh|mksh(-static)?|pdksh|lksh)$/i]
			[".sh-session", "auto-yellow"
				scope: "shell-session"
				alias: /^(Bash|Shell|Sh)[-\s]*(Session|Console)$/i]
			[/\.zsh(-theme|_history)?$|^\.?(antigen|zpreztorc|zlogin|zlogout|zprofile|zshenv|zshrc)$/i, "medium-blue"]
			[/\.fish$|^\.fishrc$/i, "medium-green", "fish"]
			[/^\.?(login|profile)$/, "medium-red"]
			[/^\.?_?dir_?colors$/i, "medium-green", "dircolors"]
			[".inputrc", "medium-red", alias: "Readline Config", scope: "inputrc"]
			[".tmux", "medium-blue"]
			[/^(configure|config\.(guess|rpath|status|sub)|depcomp|libtool|compile)$/, "medium-red"]
			[/^\/(private\/)?etc\/([^/]+\/)*(profile$|nanorc$|rc\.|csh\.)/i, "dark-purple", matchPath: true]
			[/^\.?cshrc$/i, "medium-orange"]
			[".profile", "dark-purple"]
			[".tcsh", "medium-green"]
			[".csh", "medium-yellow"]
		]

	Shen:
		icon: "shen"
		match: ".shen"
		colour: "dark-cyan"

	Shipit:
		icon: "shipit"
		priority: 2
		match: /^shipitfile(\b.+)?\.[cm]?js$/i
		colour: "medium-orange"

	Shippable:
		icon: "shippable"
		priority: 2
		match: /^shippable\.ya?ml$/i
		colour: "medium-cyan"

	Shopify:
		icon: "shopify"
		match: ".liquid"
		colour: "medium-green"

	Sieve:
		icon: "filter"
		match: ".sieve"
		colour: "medium-red"
		scope: "sieve"
		interpreter: "pigeonhole"
		mime: "application/sieve"

	Sigils:
		icon: "sigils"
		match: ".sigils"
		colour: "dark-red"

	SilverStripe:
		icon: "silverstripe"
		scope: /(^|\.)ss(template)?(\.|$)/i
		match: ".ss"
		colour: "medium-blue"

	Sketch:
		icon: "sketch"
		match: ".sketch"
		colour: "medium-orange"

	"SketchUp LayOut":
		icon: "sketchup-lo"
		match: ".layout"
		colour: "auto-red"

	"SketchUp Make":
		icon: "sketchup-mk"
		match: ".skp"
		colour: "medium-red"

	"SketchUp Style Builder":
		icon: "sketchup-sb"
		match: ".style"
		colour: "auto-red"

	Skipper:
		icon: "anchor"
		match: ".eskip"
		scope: "eskip"
		colour: "dark-blue"

	Slash:
		icon: "slash"
		scope: "slash"
		match: ".sl"
		colour: "dark-blue"

	Smarty:
		icon: "smarty"
		scope: "smarty"
		match: ".tpl"
		colour: "auto-yellow"

	Snapcraft:
		icon: "snapcraft"
		match: /^snapcraft\.ya?ml$/i
		colour: "dark-cyan"
		priority: 2
		uses: "YAML"

	"Snap SVG":
		icon: "snapsvg"
		priority: 2
		match: /^snap\.svg([-.]min)?\.[cm]?js$/i
		colour: "medium-cyan"

	Snort:
		icon: "snort"
		match: ".snort"
		colour: "light-red"
		scope: "snort"

	Snyk:
		icon: "snyk"
		match: ".snyk"
		colour: "dark-purple"

	Solidarity:
		icon: "solidarity"
		priority: 2
		match: /^\.solidarity(\.json)?$/i
		colour: "dark-red"

	Solidity:
		icon: "solidity"
		match: /\.sol(idity)?$/i
		scope: "solidity"
		colour: "dark-cyan"

	Sophia:
		icon: "sophia"
		match: ".aes"
		colour: "dark-pink"
		scope: "sophia"

	Sorbet:
		icon: "sorbet"
		match: ".rbi"
		colour: "auto-purple"
		uses: "Ruby"

	SourcePawn:
		icon: "clojure"
		match: [
			[/\.(sma|sp)$/i, "auto-yellow", scope: "sp", alias: "sourcemod"]
			[".inc", "medium-green"]
		]

	Spacemacs:
		icon: "spacemacs"
		match: /(^|\.)spacemacs$/i
		colour: "medium-purple"
		interpreter: "spacemacs"
		scope: "spacemacs"

	SPARQL:
		icon: "sparql"
		match: [
			[".sparql", "medium-blue", scope: "rq"]
			[".rq", "dark-blue"]
		]

	SquareSpace: # JSON Templates
		icon: "squarespace"
		match: ".jsont"
		scope: "jsont"
		colour: "dark-purple"
		alias: /^(json[-_]?t|json[-_\s]?template)$/i

	SQF:
		icon: "sqf"
		match: [
			[".sqf", "dark-maroon", "sqf"]
			[".hqf", "dark-red"]
		]

	SQL:
		icon: "sql"
		match: [
			[/\.(my)?sql$/i, "medium-orange", "sql"]
			[".ddl", "medium-blue"]
			[".udf", "medium-green"]
			[".hql", "medium-red"]
			[".viw", "dark-cyan"]
			[".prc", "dark-blue"]
			[".cql", "dark-blue"]
			[".db2", "medium-purple"]

# Informix 4GL
			[".4gl", "medium-blue", scope: /4GL(\.|$)/i]
			[".per", "medium-cyan"]
			[".spsql", "medium-green"]
		]

	SQLite:
		icon: "sqlite"
		match: [
			[".sqlite", "medium-blue"]
			[".sqlite3", "dark-blue", signature: /^SQLite format 3/]
			[".db", "medium-purple"]
			[".db3", "dark-purple"]
		]

	Squirrel:
		icon: "squirrel"
		match: [
			[".nut", "medium-maroon", scope: "nut"]
			[".gnut", "medium-red"]
		]

	"SSH keys":
		icon: "key"
		match: [
			[".pub", "medium-yellow"]
			[".pem", "medium-orange"]
			[".key", "medium-blue"]
			[".crt", "medium-blue"]
			[".der", "medium-purple"]
			[/^id_rsa/, "medium-red"]
			[/\.glyphs\d*License$/i, "medium-green"]
			[/^(master\.)?passwd$/i, "dark-green"]
			[/^git-credential-osxkeychain$/i, "medium-green"]
			[/\.ssh[\/\\][^/\\\s]+$/, "dark-blue", matchPath: true, priority: 0]
		]

	Stan:
		icon: "stan"
		scope: "stan"
		match: ".stan"
		colour: "medium-red"

	Stata:
		icon: "stata"
		match: [
			[".do", "medium-blue", "stata"]
			[".ado", "dark-blue"]
			[".doh", "light-blue"]
			[".ihlp", "medium-cyan"]
			[".mata", "dark-cyan", "mata"]
			[".matah", "light-cyan"]
			[".sthlp", "medium-purple"]
		]


	StdlibJS:
		icon: "stdlibjs"
		priority: 2
		match: [
			[/^stdlib(-.+)?\.[cm]?js$/i, "medium-orange"]
			[/^stdlib(-.+)?\.[cm]?js\.gz$/i, "medium-blue"]
		]

	Storybook:
		icon: "storybook"
		priority: 2
		match: [
			[/\.(story|stories)\.([cm]?js|jsx)$/i, "medium-orange"]
			[/\.(story|stories)\.tsx?$/i, "medium-blue"]
		]

	Storyist:
		icon: "storyist"
		match: ".story"
		colour: "medium-blue"

	Strings:
		icon: "strings"
		scope: "strings"
		match: ".strings"
		colour: "medium-red"

	Stylable:
		icon: "stylable"
		match: ".st.css"
		colour: "medium-green"
		priority: 2

	StyledComponent:
		icon: "nailpolish"
		priority: 2
		match: [
			[".sc.js", "medium-yellow", scope: /^styled$/]
			[".sc.jsx", "auto-blue"]
			[".sc.mjs", "auto-blue"]
			[".sc.cjs", "auto-green"]
			[".sc.ts", "medium-blue"]
			[".sc.tsx", "light-blue"]
		]

	Stylelint:
		icon: "stylelint"
		priority: 2
		match: [
			[/^\.stylelintrc(\.|$)/i, "medium-purple"]
			[/^stylelint\.config\.[cm]?js$/i, "auto-yellow"]
			[/\.stylelint(ignore|cache)$/i, "dark-blue"]
		]

	"Stylish Haskell":
		icon: "stylishhaskell"
		priority: 2
		match: /^\.stylish-haskell\.ya?ml$/i
		colour: "medium-purple"


	"Sublime Text":
		icon: "sublime"
		match: [
			[/\.(stTheme|sublime[-_](build|commands|completions|keymap|macro|menu|mousemap|project|settings|theme|workspace|metrics|session|snippet))$/i, "medium-orange"]
			[".sublime-syntax", "dark-orange"]
		]

	SuperCollider:
		icon: "scd"
		scope: "supercollider"
		interpreter: /sclang|scsynth/
		match: ".scd"
		colour: "medium-red"

	Swagger:
		icon: "swagger"
		colour: "medium-green"
		match: [
			[/^(openapi|swagger)\.(json|yaml|yml)$/i, "medium-green", priority: 2]
			[".swagger-codegen-ignore", "dark-green"]
		]


	SystemVerilog:
		icon: "sysverilog"
		match: [
			[".sv", "auto-blue"]
			[".svh", "auto-green"]
			[".vh", "auto-cyan"]
		]

	"Table of Contents":
		icon: "toc"
		scope: "toc"
		priority: 2
		match: ".toc"
		colour: "auto-cyan"

	Tagfile: # CTags
		icon: "tag"
		match: [
			[/\.?c?tags$/i, "medium-blue"]
			[/\.gemtags/i, "medium-red"]
			[/\.hgtags$|^localtags$/i, "medium-cyan"]
			[/^\.atom-socket-.+\.\d$/, "medium-green", priority: 2]
			[".pid", "medium-orange"]
			[".tld", "medium-maroon", uses: "XML"]
			[/(\.|^)sha(256|sum)?$/i, "medium-green"]
		]

	Tailwind:
		icon: "tailwind"
		match: /^\.?tailwind(\.config)?\.([cm]?js|ts|coffee)$/i
		colour: "medium-cyan"
		priority: 2

	Tcl:
		icon: "tcl"
		match: [
			[".tcl", "dark-orange", scope: "tcl", interpreter: /tclsh|wish/]
			[".adp", "medium-orange"]
			[".tm", "medium-red"]
			[".exp", "dark-blue"]
			[/^\.tkcvs/i, "medium-cyan"]
			[/^\.tkdiffrc$/, "dark-red"]
		]

	Tea:
		icon: "coffee"
		scope: "tea"
		match: ".tea"
		colour: "medium-orange"

	"Team Foundation Server":
		icon: "tfs"
		match: ".tfignore"
		colour: "dark-purple"
		alias: "tfs"

	Telegram:
		icon: "telegram"
		match: [
			[".tl", "medium-blue", scope: "tl", alias: /Type\s*Language/i]
			[".xps", "light-blue"] # Microsoft XPS Viewer: Unrelated, but similar icon
		]

	"Template Toolkit":
		icon: "tt"
		match: [
			[/\.tt2?$/i, "medium-blue"]
			[".tt3", "medium-purple"]
		]


	Terraform:
		icon: "terraform"
		match: [
			[/\.tf(vars)?$/i, "dark-purple", scope: /\.terra(form)?$/i]
			[".tf.json", "medium-yellow", priority: 2]
			[/\.tfstate(\.backup)?$/i, "medium-cyan"]
		]

	Terser:
		icon: "terser"
		match: /^\.(terser|uglify)rc(\.\w+)?$/i
		colour: "medium-orange"
		priority: 2

	"Test, CoffeeScript":
		icon: "test-coffee"
		match: /[._-](spec|test)s?\.((lit)?coffee|iced|cjsx)$/i
		colour: "auto-maroon"
		priority: 1.5

	"Test, Generic":
		icon: "test-generic"
		match: [
			[/([\\/])t\1t?\d+(?:(?!\1).)+\.sh$/i, "medium-green", matchPath: true, priority: 1.5]
			[".test", "medium-green", priority: 0.25]
			[".xspec", "dark-green"]
		]

	"Test, Go":
		icon: "test-go"
		match: /[._-](spec|test)s?\.go$/i
		colour: "auto-cyan"
		priority: 1.5

	"Test, Haskell":
		icon: "test-hs"
		match: /[._-](spec|test)s?\.(hsc?|c2hs|lhs)$/i
		colour: "auto-purple"
		priority: 1.5

	"Test, JavaScript":
		icon: "test-js"
		priority: 1.5
		match: [
			[/[._-](spec|test)s?\.([_s]?js|js[bms]|es\d*)$/i, "auto-yellow"]
			[/[._-](spec|test)s?\.mjs$/i, "auto-blue"]
			[/[._-](spec|test)s?\.cjs$/i, "auto-green"]
			[/([\\\/])(?:(spec|test)s?|t)\1(?:\d+[-.])+(?!-)[^.\\\/]+\.js$/i, "auto-yellow", matchPath: true]
			[/([\\\/])(?:(spec|test)s?|t)\1(?:\d+[-.])+(?!-)[^.\\\/]+\.mjs$/i, "auto-yellow", matchPath: true]
			[/([\\\/])(?:(spec|test)s?|t)\1(?:\d+[-.])+(?!-)[^.\\\/]+\.cjs$/i, "auto-yellow", matchPath: true]
		]

	"Test, Perl":
		icon: "test-perl"
		match: [
			[".t", "auto-blue"]
			[/([\\\x2F])t\1(?:(?!\1).)+\.t$/i, "auto-blue", priority: 1.5, matchPath: true]
			[/([\\\x2F])(test|spec)s?(\1((?!\1).)+)*\1((?!\1).)+[._-](spec|test)s?\.p(er)?l$/i, "auto-blue", priority: 1.5, matchPath: true]
		]

	"Test, Python":
		icon: "test-python"
		match: [
			[/[._-](spec|test)s?\.py(3|thon)?/i, "dark-blue", priority: 1.5]
			[/([\\\x2F])(test|spec)s?(\1((?!\1).)+)*\1(((?!\1).)+[._-](?:spec|test)s?|(?:spec|test)s?[._-].+)\.py(3|thon)?$/i, "dark-blue", priority: 1.5, matchPath: true]
		]

	"Test, React":
		icon: "test-react"
		priority: 1.5
		match: [
			[/[._-](spec|test)s?\.(jsx|react\.[cm]?js)$/, "auto-blue"]
			[/([\\\/])(spec|test)s?\1(?:\d+[-.])+(?!-)[^.\\\/]+\.(jsx|react\.[cm]?js)$/i, "auto-blue", matchPath: true]
		]

	"Test, Ruby":
		icon: "test-ruby"
		match: [
			[/[._-](spec|test)s?\.(rb|ruby)$/i, "auto-red", priority: 2]
			[/([\\\x2F])(t|tests?|specs?)\1+(?:(?!\1).)*\.(rb|ruby)$/, "auto-red", priority: 2, matchPath: true]
		]

	"Test, Rust":
		icon: "test-rust"
		match: /[._-](spec|test)s?\.rs$/i
		colour: "auto-maroon"
		priority: 1.5

	"Test, TypeScript":
		icon: "test-ts"
		priority: 1.5
		match: [
			[/[._-](spec|test)s?\.ts$/i, "auto-blue"]
			[/[._-](spec|test)s?\.tsx$/i, ["light-blue", "medium-blue"]]
			[/([\\\/])(spec|test)s?\1(?:\d+[-.])+(?!-)[^.\\\/]+\.ts$/i, "auto-blue", matchPath: true]
			[/([\\\/])(spec|test)s?\1(?:\d+[-.])+(?!-)[^.\\\/]+\.tsx$/i, ["light-blue", "medium-blue"], matchPath: true]
		]

	TeX:
		icon: "tex"
		match: [
			[".tex", "auto-blue", scope: /(^|\.)latex(\.|$)/i, alias: "latex"]
			[".ltx", "auto-blue"]
			[".aux", "auto-green"]
			[".sty", "auto-red", scope: /(^|\.)tex(\.|$)/i]
			[".dtx", "auto-maroon"]
			[".cls", "auto-orange"]
			[".ins", "auto-green"]
			[".lbx", "auto-blue"]
			[".mkiv", "auto-orange"]
			[".mkvi", "auto-orange"]
			[".mkii", "auto-orange"]
			[".pgf", "auto-purple", "pgf"]
			[".tikz", "auto-purple", "tikz"]
			[/\.(texi(nfo)?|txi)$/i, "auto-red", "texinfo"]
			[/^hyphen(ex)?\.(cs|den|det|fr|sv|us)$/, "auto-red", priority: 2]
		]

	Text:
		icon: "icon-file-text"
		noSuffix: true
		match: [
			[/\.te?xt$/i, "medium-blue", signature: /^\xEF\xBB\xBF|^\xFF\xFE/]
			[/\.log$|^Terminal[-_\s]Saved[-_\s]Output$/i, "medium-maroon"]
			[/\.git[\/\\]description$/, "dark-red", matchPath: true]
			[/(\\|\/)share(?:\1misc)?\1(?:operator|mail\.(?:tilde)?help)$/, "dark-red", matchPath: true]
			[/\.err$|\.std(err|out)$/i, "medium-red"]
			[".rtf", "dark-red"]
			[/\.i?nfo$/i, "dark-blue"]
			[".abt", "dark-purple"]
			[".ans", "dark-orange"]
			[".brf", "medium-maroon"]
			[".dri", "medium-blue"]
			[".etx", "medium-yellow"]
			[".irclog", "medium-blue"]
			[".more", "medium-purple"]
			[".msg", "medium-orange"]
			[".no", "medium-red"]
			[".rpt", "medium-maroon"]
			[".srt", "medium-purple", scope: "srt", alias: /^Sub-?Rip([-\s]*(Text|Sub-?titles?)){0,2}$/i]
			[".sub", "dark-purple"]
			[/^(bug-report|fdl|for-release|tests)$/i, "medium-red"]
			[/\.(utxt|utf8)$/i, "medium-cyan"]
			[".weechatlog", "medium-green"]
			[".uof", "dark-red"]
			[".uot", "medium-blue"]
			[".uos", "medium-green"]
			[".uop", "medium-purple"]
		]


	TextMate:
		icon: "textmate"
		match: [
			[".tmcg", "medium-green", scope: "tmcg"]
			[".tmLanguage", "dark-purple"]
			[".tmCommand", "medium-blue"]
			[".tmPreferences", "dark-blue"]
			[".tmSnippet", "dark-orange"]
			[".tmTheme", "medium-pink"]
			[".tmMacro", "medium-maroon"]
			[".yaml-tmlanguage", "medium-orange"]
			[".JSON-tmLanguage", "medium-purple"]
		]

	Theme:
		icon: "icon-paintcan"
		noSuffix: true
		match: ".theme"
		colour: "medium-purple"

	Thor:
		icon: "thor"
		match: [
			[".thor", "medium-orange"]
			[/^Thorfile$/i, "dark-orange"]
		]

	"TI Graphics Calculator":
		icon: "calc"
		priority: 2
		match: /\.8x[pk](\.txt)?$/i
		colour: "medium-maroon"
		signature: /^\*\*TI[789]\d\*\*/

	Tipe:
		icon: "tipe"
		match: ".tipe"
		colour: "medium-cyan"

	"TLA+":
		icon: "tla"
		match: ".tla"
		colour: "medium-maroon"
		scope: "tla"

	tmux:
		icon: "tmux"
		match: /(\.|_|^)tmux\.conf$/i
		colour: "medium-green"
		priority: 2
		scope: "tmux"


	Truffle:
		icon: "truffle"
		priority: 2
		match: /^\.?truffle\.[cm]?js$/i
		colour: "auto-maroon"


	"TTCN-3":
		icon: "ttcn3"
		match: /\.ttcn3?$/i
		colour: "medium-blue"
		scope: "TTCN-3"

	Turing:
		icon: "turing"
		scope: "turing"
		match: ".tu"
		colour: "medium-red"


	TwineScript:
		icon: "twine"
		scope: "tw"
		match: ".tw"
		colour: "medium-blue"
		alias: "SugarCube"
		interpreter: /^(Twine|Twee)$/i

	TXL:
		icon: "txl"
		scope: "txl"
		match: ".txl"
		colour: "medium-orange"

	TypeDoc:
		icon: "typedoc"
		priority: 2
		match: /^typedoc\.json$/i
		colour: "dark-purple"


	TypoScript:
		icon: "typo3"
		match: /\.(typoscript|tsconfig)$/i
		colour: "medium-orange"
		alias: "typo3"
